@inject IOptions<AutorouteOptions> AutorouteOptions

@using Microsoft.Extensions.Options;
@using Microsoft.AspNetCore.Routing;
@using OrchardCore.ContentManagement.Routing;
@using OrchardCore.Media

@inject IMediaFileStore MediaFileStore

@{
    var linkUrl = "#";

    if (Model.ContentItem.Content.CommonMenuItem.LinkTo.ContentItemIds.Count > 0)
    {
        var routeValues = new RouteValueDictionary(AutorouteOptions.Value.GlobalRouteValues);
        routeValues[AutorouteOptions.Value.ContentItemIdKey] = Model.ContentItem.Content.CommonMenuItem.LinkTo.ContentItemIds[0];
        linkUrl = Url.RouteUrl(routeValues);
    }

    if (!string.IsNullOrWhiteSpace(Model.ContentItem.Content.CommonMenuItem.ExternalUrl.Text.ToString()))
    {
        linkUrl = Model.ContentItem.Content.CommonMenuItem.ExternalUrl.Text.ToString();
    }

    var currentPageUrl = FullRequestPath;

    var cssClasses = "";

    if (linkUrl.Equals(currentPageUrl, StringComparison.OrdinalIgnoreCase))
    {
        cssClasses = cssClasses + " is-current-page";
    }
}

<a href="@linkUrl" class="@cssClasses" @{ if ((bool)Model.ContentItem.Content.CommonMenuItem.OpenNewTab.Value) { <text>target="_blank" rel="noopener noreferrer"</text> } }>
    <img src="@MediaFileStore.MapPathToPublicUrl(Model.ContentItem.Content.ImageMenuItem.Image.Paths[0].ToString())" alt="@Model.ContentItem.Content.ImageMenuItem.AlternateText.Text" />
</a>
