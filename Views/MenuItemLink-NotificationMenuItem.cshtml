@inject IOptions<AutorouteOptions> AutorouteOptions

@using Microsoft.Extensions.Options;
@using Microsoft.AspNetCore.Routing;
@using OrchardCore.ContentManagement
@using OrchardCore.ContentManagement.Routing;

@{
    ContentItem contentItem = Model.ContentItem;

    var linkBehaviourPart = contentItem.Content.LinkBehaviourPart;

    var routeValues = new RouteValueDictionary(AutorouteOptions.Value.GlobalRouteValues);
    routeValues[AutorouteOptions.Value.ContentItemIdKey] = Model.ContentItem.Content.NotificationMenuItem.SelectedContentItem.ContentItemIds[0];
    var linkUrl = Url.RouteUrl(routeValues);
    var currentPageUrl = FullRequestPath;

    var openIn = linkBehaviourPart?.OpenIn?.Text.Value ?? "_self";
    var isModal = (openIn == "modal" || openIn == "modal-wide") ? true : false;
    var onClickEvent = linkBehaviourPart?.ClickEvent?.Value ?? string.Empty;

    var query = (string)Model.ContentItem.Content.NotificationMenuItem.NotificationQuery.Value;
    var notificationCount = 0;

    try
    {
        notificationCount = (await Orchard.ContentQueryAsync(query)).Count();
    }
    catch
    {
        notificationCount = 0;
    }

    var cssClasses = "nav__item-link nav__item-link--notification";
    var style = (string)Model.ContentItem.Content.LinkVisualPart.Style?.Text ?? string.Empty;

    if (!string.IsNullOrWhiteSpace(style))
    {
        cssClasses = $"{cssClasses} {style}";
    }
    else
    {
        cssClasses = $"{cssClasses} nav__item-link--default link";
    }

    if (linkUrl.Equals(currentPageUrl, StringComparison.OrdinalIgnoreCase)) 
    {
        cssClasses += " is-current-page";
    }

    if (isModal)
    {
        cssClasses = $"{cssClasses} js-iframe-modal";
    }
}

@if (notificationCount > 0)
{
    <a href="@linkUrl"
        class="@cssClasses"
        @Html.Raw(onClickEvent != null ? $"onClick=\"{onClickEvent}\"" : string.Empty)
        @Html.Raw(openIn != null || isModal == false ? $"target=\"{openIn}\"" : string.Empty)
        @Html.Raw(isModal ? $"data-iframe=\"{isModal}\"" : string.Empty)
        @Html.Raw(openIn == "modal-wide" ? $"data-wide=\"{isModal}\"" : string.Empty)>
        @Model.ContentItem.DisplayText
        <span class="nav__item-count">@notificationCount</span>
    </a>
}
else
{
    <a href="@linkUrl"
        class="@cssClasses"
        @Html.Raw(onClickEvent != null ? $"onClick=\"{onClickEvent}\"" : string.Empty)
        @Html.Raw(openIn != null || isModal == false ? $"target=\"{openIn}\"" : string.Empty)
        @Html.Raw(isModal ? $"data-iframe=\"{isModal}\"" : string.Empty)
        @Html.Raw(openIn == "modal-wide" ? $"data-wide=\"{isModal}\"" : string.Empty)>
        @Model.ContentItem.DisplayText
   </a>
}
