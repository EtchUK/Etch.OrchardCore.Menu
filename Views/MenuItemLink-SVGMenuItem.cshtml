@inject IOptions<AutorouteOptions> AutorouteOptions

@using Microsoft.Extensions.Options;
@using Microsoft.AspNetCore.Routing;
@using OrchardCore.ContentManagement.Routing;
@{
    ContentItem contentItem = Model.ContentItem;

    var linkBehaviourPart = contentItem.Content.LinkBehaviourPart;
    var linkDestinationPart = contentItem.Content.LinkDestinationPart;

    var linkUrl = linkDestinationPart?.DestinationUrl?.Text.Value ?? "#";

    var openIn = linkBehaviourPart?.OpenIn?.Text.Value ?? "_self";
    var isModal = (openIn == "modal" || openIn == "modal-wide") ? true : false;
    var onClickEvent = linkBehaviourPart?.ClickEvent?.Value ?? string.Empty;

    var currentPageUrl = FullRequestPath;

    var cssClasses = string.Empty;

    if (linkUrl.Equals(currentPageUrl, StringComparison.OrdinalIgnoreCase))
    {
        cssClasses = cssClasses + " is-current-page";
    }

    if (isModal)
    {
        cssClasses = $"{cssClasses} js-iframe-modal";
    }
}

<a href="@linkUrl" 
   class="@cssClasses"
   @Html.Raw(onClickEvent != null ? $"onClick=\"{onClickEvent}\"" : string.Empty)
   @Html.Raw(openIn != null || isModal == false ? $"target=\"{openIn}\"" : string.Empty)
   @Html.Raw(isModal ? $"data-iframe=\"{isModal}\"" : string.Empty)
   @Html.Raw(openIn == "modal-wide" ? $"data-wide=\"{isModal}\"" : string.Empty)
   title="@Model.ContentItem.Content.SVGMenuItem.AlternateText?.Text"
   aria-label="@Model.ContentItem.Content.SVGMenuItem.AlternateText?.Text">
    @Html.Raw(Model.ContentItem.Content.SVGMenuItem.Code.Value)
</a>
