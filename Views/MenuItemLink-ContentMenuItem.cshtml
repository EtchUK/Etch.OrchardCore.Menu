@inject IOptions<AutorouteOptions> AutorouteOptions

@using Microsoft.Extensions.Options;
@using Microsoft.AspNetCore.Routing;
@using OrchardCore.ContentManagement
@using OrchardCore.ContentManagement.Routing;
@using OrchardCore.Menu.Models

@{
    ContentItem contentItem = Model.ContentItem;
    var menuItemPart = contentItem.As<ContentMenuItemPart>();
    var linkBehaviourPart = contentItem.Content.LinkBehaviourPart;

    var routeValues = new RouteValueDictionary(AutorouteOptions.Value.GlobalRouteValues);
    routeValues[AutorouteOptions.Value.ContentItemIdKey] = menuItemPart.ContentItem.Content.ContentMenuItemPart.SelectedContentItem.ContentItemIds[0];
    var linkUrl = Url.RouteUrl(routeValues);
    var currentPageUrl = FullRequestPath;

    var openIn = linkBehaviourPart?.OpenIn?.Text.Value ?? "_self";
    var isModal = (openIn == "modal" || openIn == "modal-wide") ? true : false ;
    var onClickEvent = linkBehaviourPart?.ClickEvent?.Value ?? string.Empty;
}

@{
    var cssClasses = "nav__item-link";

    if (linkUrl.Equals(currentPageUrl, StringComparison.OrdinalIgnoreCase))
    {
        cssClasses = $"{cssClasses} is-current-page";
    }

    if (Model.HasItems)
    {
        cssClasses = $"{cssClasses} js-nav-parent-link";
    }

    var style = (string)Model.ContentItem.Content.LinkVisualPart?.Style?.Text ?? string.Empty;

    if (!string.IsNullOrWhiteSpace(style))
    {
        cssClasses = $"{cssClasses} {style}";
    } 
    else 
    {
        cssClasses = $"{cssClasses} nav__item-link--default";
    }

    if (isModal)
    {
        cssClasses = $"{cssClasses} js-iframe-modal";
    }

}

<a href="@linkUrl"
    class="@cssClasses.Trim()"
    @Html.Raw(onClickEvent != null ? $"onClick=\"{onClickEvent}\"" : string.Empty)
    @Html.Raw(openIn != null || isModal == false ? $"target=\"{openIn}\"" : string.Empty)
    @Html.Raw(isModal ? $"data-iframe=\"{isModal}\"" : string.Empty)
    @Html.Raw(openIn == "modal-wide" ? $"data-wide=\"{isModal}\"" : string.Empty)
    @Html.Raw(Model.HasItems ? "aria-haspopup=\"true\" aria-expanded=\"false\"" : string.Empty)>
    @contentItem.DisplayText

    @if (Model.HasItems)
    {
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 256 158.2">
            <path d="M225.8 0L128 97.8 30.2 0 0 30.2l128 128 128-128z" />
        </svg>
    }
</a>
